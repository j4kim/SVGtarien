Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programme
Rule 1     programme -> statement
Rule 2     programme -> statement programme
Rule 3     statement -> method
Rule 4     method -> methodName ( arguments )
Rule 5     method -> methodName ( )
Rule 6     arguments -> expression
Rule 7     arguments -> expression , expression
Rule 8     methodName -> RESERVEDWORDS
Rule 9     expression -> NUMBER

Terminals, with rules where they appear

(                    : 4 5
)                    : 4 5
,                    : 7
NUMBER               : 9
RESERVEDWORDS        : 8
error                : 

Nonterminals, with rules where they appear

arguments            : 4
expression           : 6 7 7
method               : 3
methodName           : 4 5
programme            : 2 0
statement            : 1 2

Parsing method: LALR

state 0

    (0) S' -> . programme
    (1) programme -> . statement
    (2) programme -> . statement programme
    (3) statement -> . method
    (4) method -> . methodName ( arguments )
    (5) method -> . methodName ( )
    (8) methodName -> . RESERVEDWORDS

    RESERVEDWORDS   shift and go to state 2

    programme                      shift and go to state 1
    statement                      shift and go to state 4
    methodName                     shift and go to state 5
    method                         shift and go to state 3

state 1

    (0) S' -> programme .



state 2

    (8) methodName -> RESERVEDWORDS .

    (               reduce using rule 8 (methodName -> RESERVEDWORDS .)


state 3

    (3) statement -> method .

    RESERVEDWORDS   reduce using rule 3 (statement -> method .)
    $end            reduce using rule 3 (statement -> method .)


state 4

    (1) programme -> statement .
    (2) programme -> statement . programme
    (1) programme -> . statement
    (2) programme -> . statement programme
    (3) statement -> . method
    (4) method -> . methodName ( arguments )
    (5) method -> . methodName ( )
    (8) methodName -> . RESERVEDWORDS

    $end            reduce using rule 1 (programme -> statement .)
    RESERVEDWORDS   shift and go to state 2

    programme                      shift and go to state 6
    statement                      shift and go to state 4
    methodName                     shift and go to state 5
    method                         shift and go to state 3

state 5

    (4) method -> methodName . ( arguments )
    (5) method -> methodName . ( )

    (               shift and go to state 7


state 6

    (2) programme -> statement programme .

    $end            reduce using rule 2 (programme -> statement programme .)


state 7

    (4) method -> methodName ( . arguments )
    (5) method -> methodName ( . )
    (6) arguments -> . expression
    (7) arguments -> . expression , expression
    (9) expression -> . NUMBER

    )               shift and go to state 9
    NUMBER          shift and go to state 10

    expression                     shift and go to state 8
    arguments                      shift and go to state 11

state 8

    (6) arguments -> expression .
    (7) arguments -> expression . , expression

    )               reduce using rule 6 (arguments -> expression .)
    ,               shift and go to state 12


state 9

    (5) method -> methodName ( ) .

    RESERVEDWORDS   reduce using rule 5 (method -> methodName ( ) .)
    $end            reduce using rule 5 (method -> methodName ( ) .)


state 10

    (9) expression -> NUMBER .

    ,               reduce using rule 9 (expression -> NUMBER .)
    )               reduce using rule 9 (expression -> NUMBER .)


state 11

    (4) method -> methodName ( arguments . )

    )               shift and go to state 13


state 12

    (7) arguments -> expression , . expression
    (9) expression -> . NUMBER

    NUMBER          shift and go to state 10

    expression                     shift and go to state 14

state 13

    (4) method -> methodName ( arguments ) .

    RESERVEDWORDS   reduce using rule 4 (method -> methodName ( arguments ) .)
    $end            reduce using rule 4 (method -> methodName ( arguments ) .)


state 14

    (7) arguments -> expression , expression .

    )               reduce using rule 7 (arguments -> expression , expression .)

